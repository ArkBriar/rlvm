# Main scons file

import shutil
import sys

Import('env')

########################################################## [ Root environment ]
test_env = env.Clone()
test_env.Append(
  CPPDEFINES = [
    "CASE_SENSITIVE_FILESYSTEM",
    "_THREAD_SAFE"
  ],
)

if test_env['PLATFORM'] == 'darwin':
  test_env.Append(FRAMEWORKS=["OpenGL"])
else:
  test_env.Append(LIBS=["GL", "GLU"])
test_env.ParseConfig("sdl-config --libs")

test_env.Append(CPPPATH = ["#/test"])

config = test_env.Configure()

# Building the luaRlvm test harness requires having lua installed; if we do
# have lua installed, go ahead and use it, but don't really worry if this fails
# since end users don't use this binary.
if config.CheckLibWithHeader('lua5.1', 'lua5.1/lua.h', 'cpp'):
  env['BUILD_LUA_TESTS'] = True
else:
  print "Not building luaRlvm. (Don't worry, it's only a testing tool!)"

test_env = config.Finish()

script_machine_files = [
  "test/ScriptMachine/ScriptMachine.cpp",
  "test/ScriptMachine/ScriptWorld.cpp",
  "test/ScriptMachine/luabind_EventSystem.cpp",
  "test/ScriptMachine/luabind_GraphicsObject.cpp",
  "test/ScriptMachine/luabind_GraphicsSystem.cpp",
  "test/ScriptMachine/luabind_Machine.cpp",
  "test/ScriptMachine/luabind_System.cpp",
  "test/ScriptMachine/luabind_utility.cpp"
]

if env['BUILD_LUA_TESTS'] == True:
  test_env.Append(CPPPATH = [ "/usr/include/lua5.1" ] )

  # Build our included copy of luabind.
  test_env.BuildSubcomponent("luabind")

  test_env.RlvmProgram("luaRlvm", ['test/luaRlvm.cpp', script_machine_files],
                       use_lib_set = ["SDL", "LUA"],
                       rlvm_libs = ["system_sdl", "rlvm"])
  test_env.Install('$OUTPUT_DIR', 'luaRlvm')
