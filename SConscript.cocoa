# Builds the rlvm.app with all binaries and files.

import re

Import('env')

static_env = env.Clone()

def MergeEverythingButSDLMain(env, cmd):
  """
  Filters out the libSDLmain.a argument from the return value of sdl-config.
  """
  p = re.compile('libSDLmain')
  def isSDLMain(x):
    return not p.search(x)
  filtered_args = filter(isSDLMain, cmd.split(' '))
  filtered_string = " ".join(filtered_args)
  return env.MergeFlags(filtered_args, 0)

static_env.ParseConfig("sdl-config --static-libs", MergeEverythingButSDLMain)

cocoarlvm_files = [
  # Technically cross platform, but put here for SDL dependency.
  "src/MachineBase/RLVMInstance.cpp",

  "src/Platforms/osx/CocoaRLVMInstance.mm",
  "src/Platforms/osx/SDLMain.mm"
]

# Builds a fullstatic version of rlvm and then builds a bundle
static_env.RlvmProgram('rlvm-static', cocoarlvm_files,
                       use_lib_set = ["SDL"],
                       full_static_build = True,
                       rlvm_libs = ["guichan_platform", "system_sdl", "rlvm"])

static_env.InstallAs(target='$OUTPUT_DIR/rlvm.app/Contents/Info.plist',
                     source='src/Platforms/osx/Info.plist.in')
static_env.Install(target='$OUTPUT_DIR/rlvm.app/Contents/Resources',
                     source='resources/rlvm.icns')
static_env.Install(target='$OUTPUT_DIR/rlvm.app/Contents/Resources/',
                   source=["COPYING.TXT", "GPL.TXT", "README.TXT"])
static_env.InstallAs(target='$OUTPUT_DIR/rlvm.app/Contents/MacOS/rlvm',
                     source='rlvm-static')

