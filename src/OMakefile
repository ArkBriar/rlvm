# if $(not $(defined-env VERBOSE))
#   OMakeFlags(-S --progress)
#   export

SRCTOP = $(shell pwd)

if $(or $(equal $(OSTYPE), Win32), $(equal $(OSTYPE), WindowsNT))
  CXXFLAGS = -EHsc -W3 -wd4800 -wd4819 -wd4996 -U__STRICT_ANSI__ /J -I$(SRCTOP) -I$(SRCTOP)/../vendor $(if $(defined-env DEBUG), -Od, -O2) $(shell sdl-config --cflags) $(PLATFORMFLAGS) -D_THREAD_SAFE -DSDL_main=main
  export
else
  INCLUDES = -I$(SRCTOP) -I$(SRCTOP)/../vendor $(shell sdl-config --cflags)
  CXXFLAGS = --ansi -Wall -U__STRICT_ANSI__ -funsigned-char $(INCLUDES) $(if $(defined-env DEBUG), -g, -O2) $(PLATFORMFLAGS) -D_THREAD_SAFE
  export

# for testing
#CXXFLAGS += -DWIN32

.PHONY: clean bundle
.SUBDIRS: libReallive Effects Modules MachineBase Systems Platforms
########

LIBRLVMFILES[] = 
  MachineBase/libMachineBase
  MachineBase/GeneralOperations
  Modules/libModules
  Effects/libEffects
  Systems/Base/System
  Systems/Base/GraphicsSystem
  Systems/Base/GraphicsObject
  Systems/Base/GraphicsObjectData
  Systems/Base/GraphicsObjectOfFile
  Systems/Base/GraphicsTextObject
  Systems/Base/GraphicsStackFrame
  Systems/Base/Surface
  Systems/Base/ObjectSettings
  Systems/Base/FrameCounter
  Systems/Base/EventSystem
  Systems/Base/EventHandler
  Systems/Base/RLTimer
  Systems/Base/SystemError
  Systems/Base/TextWindow
  Systems/Base/TextWindowButton
  Systems/Base/TextPage
  Systems/Base/TextSystem
  Systems/Base/TextKeyCursor
  Systems/Base/GanGraphicsObjectData
  Systems/Base/AnmGraphicsObjectData
  Systems/Base/SelectionElement
  Systems/Base/SoundSystem
  Systems/SDL/libSDLSystem
  libReallive/libReallive
  Utilities
  dateUtil
  ../vendor/libVendorLibs

# Build our precompiled headers
Precompiled.hpp.gch: Precompiled.hpp
  if $(or $(equal $(OSTYPE), Win32), $(equal $(OSTYPE), WindowsNT))
    echo "tag" > $@
  else
    $(CXX) $(CXXFLAGS) -I. -x c++-header -c $< -o $@
CGeneratedFiles(Precompiled.hpp.gch)

StaticCLibrary(librlvm, $(LIBRLVMFILES))

########

if $(or $(equal $(OSTYPE), Win32), $(equal $(OSTYPE), WindowsNT))
  LDOUT = /Fo
  LDFLAGS += /link $(if $(defined-env DEBUG), /DEBUG, /RELEASE) -LIBPATH:$(SRCTOP) -LIBPATH:$(SRCTOP)\..\vendor librlvm$(EXT_LIB) $(shell sdl-config --libs) $(PLATFORMLIBS) SDL.lib SDL_image.lib SDL_ttf.lib
  export
else
  LDFLAGS += librlvm$(EXT_LIB) $(shell sdl-config --libs) $(shell freetype-config --libs) -lSDL_image $(PLATFORMLIBS) -lboost_program_options -lboost_serialization -lboost_filesystem -lboost_date_time -lboost_thread-mt
  export

.DEFAULT: librlvm$(EXT_LIB) $(CXXProgram rlvm, rlvm)
rlvm$(EXE): librlvm$(EXT_LIB) 

clean:
  $(RM) *.o *.gch *$(EXT_LIB) *.omc rlvm$(EXE) rlvm$(EXE).stackdump
  $(RM) -Rf rlvm.app/

#########################################################################

# Apple specific rule. These section is probably very Elliot's OSX
# laptop specific; I'm not sure how I'd do this generically.
section
  # Filter out the default libSDLmain. Instead, we're going to use the 
  # hacked up copy in Platforms/osx/ which will prompt the user for a 
  # game folder with a cocoa file selector.
  STATICSDLLIBS = $(filter-out %libSDLmain.a, $(shell sdl-config --static-libs))

  LDFLAGS = Platforms/osx/libRlvmOsx$(EXT_LIB) librlvm$(EXT_LIB) $(STATICSDLLIBS) -lz $(PLATFORMLIBS)
  if $(file-exists /sw/lib)
    LDFLAGS += /usr/local/lib/libfreetype.a /sw/lib/libSDL_image.a /sw/lib/libboost_program_options.a /sw/lib/libboost_serialization.a /sw/lib/libboost_filesystem.a /sw/lib/libboost_date_time.a /sw/lib/libboost_thread-mt.a
    export LDFLAGS

  if $(file-exists /opt/local/lib)
    LDFLAGS += /opt/local/lib/libfreetype.a /opt/local/lib/libSDL_image.a /opt/local/lib/libboost_program_options.a /opt/local/lib/libboost_serialization.a /opt/local/lib/libboost_filesystem.a /opt/local/lib/libboost_date_time.a /opt/local/lib/libboost_thread-mt.a
    export LDFLAGS

  CXXProgram(rlvm-osx-static, rlvm)

  rlvm-osx-static: Platforms/osx/libRlvmOsx$(EXT_LIB) librlvm$(EXT_LIB)

  bundle: rlvm-osx-static Platforms/osx/Info.plist.in
    mkdir -p rlvm.app/Contents/MacOS
    cp rlvm-osx-static rlvm.app/Contents/MacOS/rlvm
    strip rlvm.app/Contents/MacOS/rlvm
    cp Platforms/osx/Info.plist.in rlvm.app/Contents/Info.plist
